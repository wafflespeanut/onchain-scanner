use chrono::{offset::Utc, DateTime};
use serde::Serialize;

#[derive(Default, Debug, Clone, Serialize)]
pub struct OHLCV {
    pub timestamp: DateTime<Utc>,
    pub open: f64,
    pub high: f64,
    pub low: f64,
    pub close: f64,
    pub volume: f64,
}

#[derive(Debug)]
pub struct OHLCVList(Vec<OHLCV>);

impl std::ops::Deref for OHLCVList {
    type Target = Vec<OHLCV>;

    fn deref(&self) -> &Self::Target {
        &self.0
    }
}

#[derive(Default, Debug, Serialize)]
pub struct Analysis {
    pub range_high_breaks: Vec<RangeBreak>,
    pub range_low_breaks: Vec<RangeBreak>,
    pub bullish_engulfing: Vec<Engulfing>,
    pub bearish_engulfing: Vec<Engulfing>,
    pub ohlcv: Vec<OHLCV>,
}

#[derive(Default, Debug, Serialize)]
pub struct AnalysisOne {
    pub range_high_break: Option<RangeBreak>,
    pub range_low_break: Option<RangeBreak>,
    pub bullish_engulfing: Option<Engulfing>,
    pub bearish_engulfing: Option<Engulfing>,
    pub ohlcv: OHLCV,
}

impl Analysis {
    #[allow(deprecated)]
    pub fn last_day_data(&self) -> Option<AnalysisOne> {
        let yday = Utc::now().date().pred_opt().expect("yday is not fine?");
        let mut a = match self.ohlcv.last() {
            Some(d) if d.timestamp.date() == yday => AnalysisOne {
                ohlcv: d.clone(),
                ..Default::default()
            },
            _ => return None,
        };
        match self.range_high_breaks.last() {
            Some(&b) if b.idx == self.ohlcv.len() - 1 => {
                a.range_high_break = Some(b);
            }
            _ => (),
        }
        match self.range_low_breaks.last() {
            Some(&b) if b.idx == self.ohlcv.len() - 1 => {
                a.range_low_break = Some(b);
            }
            _ => (),
        }
        match self.bullish_engulfing.last() {
            Some(&b) if b.idx == self.ohlcv.len() - 1 => {
                a.bullish_engulfing = Some(b);
            }
            _ => (),
        }
        match self.bearish_engulfing.last() {
            Some(&b) if b.idx == self.ohlcv.len() - 1 => {
                a.bearish_engulfing = Some(b);
            }
            _ => (),
        }
        Some(a)
    }
}

#[derive(Serialize, Debug, Clone, Copy)]
pub struct RangeBreak {
    pub prev_bound: f64,
    pub idx: usize,
}

#[derive(Serialize, Debug, Clone, Copy)]
pub struct Engulfing {
    pub idx: usize,
    pub num_engulfing: u8,
    pub count_before_opp: u8, // don't think >255 candles are consecutively green/red
    pub percent_before_opp: f64,
    pub rr_prev_day_stop_until_opp: f64,
}

#[derive(PartialEq, Eq, Debug)]
enum Direction {
    Up,
    Down,
    Neutral,
}

impl OHLCVList {
    #[allow(deprecated)]
    pub fn analyze(mut self) -> Option<Analysis> {
        self.0.sort_by(|a, b| a.timestamp.cmp(&b.timestamp));
        let today = Utc::now().date();
        match self.last().map(|d| d.timestamp.date()) {
            Some(d) if d == today => {
                self.0.pop();
            },
            _ => (),
        }

        let mut analysis = Analysis::default();
        if self.len() < 2 {
            return None;
        }
        let mut prev_high = self[0].high;
        let mut prev_low = self[0].low;
        let mut last_green: Option<(usize, &OHLCV)> = None;
        let mut last_red: Option<(usize, &OHLCV)> = None;
        let mut direction = Direction::Neutral;
        for (i, ohlcv) in self.iter().enumerate() {
            if i == 0 {
                continue;
            }
            // Global range high/low breaks
            if ohlcv.close > prev_high {
                analysis.range_high_breaks.push(RangeBreak {
                    prev_bound: prev_high,
                    idx: i,
                });
            }
            if ohlcv.high > prev_high {
                prev_high = ohlcv.high;
            }
            if ohlcv.close < prev_low {
                analysis.range_low_breaks.push(RangeBreak {
                    prev_bound: prev_low,
                    idx: i,
                });
            }
            if ohlcv.low < prev_low {
                prev_low = ohlcv.low;
            }
            // Engulfing
            if ohlcv.close > ohlcv.open {
                match last_green {
                    Some((_, old_ohlcv)) if ohlcv.close > old_ohlcv.close => {
                        last_green = Some((i, ohlcv));
                    }
                    None => last_green = Some((i, ohlcv)),
                    _ => (),
                }
                match last_red {
                    Some((j, old_ohlcv)) if ohlcv.close > old_ohlcv.open && direction != Direction::Up => {
                            last_green = Some((i, ohlcv));
                            direction = Direction::Up;
                            analysis.bearish_engulfing.last_mut().map(|e| {
                                if e.count_before_opp == 0 {
                                    e.count_before_opp = i as u8 - e.idx as u8;
                                    e.percent_before_opp = -(self[i].close - self[e.idx].close)
                                        as f64
                                        / self[e.idx].close as f64;
                                    e.rr_prev_day_stop_until_opp = (self[i].close
                                        - self[e.idx].close)
                                        / (self[e.idx].close - self[e.idx].high);
                                    if (e.idx + 1..i + 1).any(|k| self[k].high > self[e.idx].high) {
                                        e.rr_prev_day_stop_until_opp = -1.;
                                    }
                                }
                            });
                            analysis.bullish_engulfing.push(Engulfing {
                                idx: i,
                                num_engulfing: (i - j) as u8,
                                count_before_opp: 0,
                                percent_before_opp: 0.,
                                rr_prev_day_stop_until_opp: 0.,
                            });
                    }
                    _ => (),
                }
            } else {
                match last_red {
                    Some((_, old_ohlcv)) if ohlcv.close < old_ohlcv.close => {
                        last_red = Some((i, ohlcv));
                    }
                    None => last_red = Some((i, ohlcv)),
                    _ => (),
                }
                match last_green {
                    Some((j, old_ohlcv)) if ohlcv.close < old_ohlcv.open && direction != Direction::Down => {
                            last_red = Some((i, ohlcv));
                            direction = Direction::Down;
                            analysis.bullish_engulfing.last_mut().map(|e| {
                                if e.count_before_opp == 0 {
                                    e.count_before_opp = i as u8 - e.idx as u8;
                                    e.percent_before_opp = (self[i].close - self[e.idx].close)
                                        as f64
                                        / self[e.idx].close as f64;
                                    e.rr_prev_day_stop_until_opp = (self[i].close
                                        - self[e.idx].close)
                                        / (self[e.idx].close - self[e.idx].low);
                                    if (e.idx + 1..i + 1).any(|k| self[k].low < self[e.idx].low) {
                                        e.rr_prev_day_stop_until_opp = -1.;
                                    }
                                }
                            });
                            analysis.bearish_engulfing.push(Engulfing {
                                idx: i,
                                num_engulfing: (i - j) as u8,
                                count_before_opp: 0,
                                percent_before_opp: 0.,
                                rr_prev_day_stop_until_opp: 0.,
                            });
                    }
                    _ => (),
                }
            }
        }
        analysis.ohlcv = self.0;
        Some(analysis)
    }
}

impl From<Vec<OHLCV>> for OHLCVList {
    fn from(o: Vec<OHLCV>) -> Self {
        OHLCVList(o)
    }
}

#[cfg(test)]
mod tests {
    use crate::provider::{GeckoTerminal, Provider};
    use chrono::offset::Utc;
    use serde_json::json;

    #[test]
    fn test_analyze() {
        let data: GeckoTerminal = serde_json::from_value(json!({"data":{"id":"f6831f69-1a6a-411e-8afd-02f2b58d796f","type":"ohlcv_request_response","attributes":{"ohlcv_list":[[1717891200,0.362003397490906,0.371862101129526,0.342646159179728,0.368161113900485,876974.7581978528],[1717804800,0.373170749214222,0.390027008147987,0.347324132866073,0.362003397490906,4313396.05819122],[1717718400,0.386361328642834,0.444234183619143,0.329349823989121,0.373170749214222,9605916.21661399],[1717632000,0.485001306441495,0.487943195426732,0.382661942122923,0.386361328642834,9196782.02957866],[1717545600,0.493496943527603,0.534917489454986,0.473676968199143,0.485001306441495,4381565.88710934],[1717459200,0.467662161411605,0.516859222742888,0.458091101613654,0.493496943527603,5513858.58808791],[1717372800,0.416577901093817,0.471537734220634,0.399670343592351,0.467662161411605,7366638.38156553],[1717286400,0.379901111582894,0.42687938304498,0.366249192445665,0.416577901093817,3890628.9051325],[1717200000,0.407097612555562,0.421897782637633,0.377071791080755,0.379901111582894,2851850.53143494],[1717113600,0.43818374292469,0.450308273213996,0.391107782770778,0.407097612555562,3373843.14936955],[1717027200,0.49061028463192,0.506192281324414,0.426989295614768,0.43818374292469,6794181.63459462],[1716940800,0.478269285147032,0.565407821342594,0.469298671173165,0.49061028463192,9017921.14160788],[1716854400,0.498770643914667,0.528375467139477,0.444721192016506,0.478269285147032,6953390.9581098],[1716768000,0.442785360277896,0.540778368213133,0.441889337328122,0.498770643914667,7483205.55091778],[1716681600,0.478844077694669,0.508776890603022,0.436485788089928,0.442785360277896,6342871.79093286],[1716595200,0.381547851604874,0.480259445249418,0.376547893024075,0.478844077694669,6710872.6119947],[1716508800,0.394052123375027,0.404893152873001,0.359461940315596,0.381547851604874,3374582.08519125],[1716422400,0.387712018009711,0.438693512480217,0.37656215051561,0.394052123375027,6504998.44120896],[1716336000,0.387660016346662,0.437659485447368,0.349147903413842,0.387712018009711,8034107.31891913],[1716249600,0.410694763607061,0.452910936521144,0.381268373182772,0.387660016346662,9138777.21809391],[1716163200,0.363819199189382,0.421612831551291,0.35701868086076,0.410694763607061,8438256.34151668],[1716076800,0.362098488061687,0.390960445924533,0.335336361516396,0.363819199189382,7023517.60926324],[1715990400,0.437213337117975,0.443116966995226,0.35043411090239,0.362098488061687,14005095.0508727],[1715904000,0.447110110363293,0.48791547556332,0.419078968644002,0.437213337117975,8990845.91693681],[1715817600,0.532645514130459,0.541234952630872,0.443390360984494,0.447110110363293,8129475.96631997],[1715731200,0.469053711185871,0.548447832438832,0.455283726917612,0.532645514130459,10494426.4655758],[1715644800,0.489664650687561,0.554453286677081,0.450004142929198,0.469053711185871,14529624.0569102],[1715558400,0.416405868257935,0.519275420548463,0.369220749396291,0.489664650687561,14433445.8412841],[1715472000,0.415850381248757,0.443096984260093,0.40296455533151,0.416405868257935,3804765.74667981],[1715385600,0.459523638681664,0.478597541575029,0.397996333303771,0.415850381248757,8145252.81482929],[1715299200,0.5406819779361,0.588882703231885,0.456635544673176,0.459523638681664,10492273.5095607],[1715212800,0.448655071140583,0.580151211023483,0.422962243394488,0.5406819779361,10612541.2207151],[1715126400,0.480583071096655,0.511281253628406,0.425128904315472,0.448655071140583,9313425.18712564],[1715040000,0.545657168950888,0.582208714412279,0.471162244314237,0.480583071096655,10597851.5565128],[1714953600,0.615043116419281,0.659500118275797,0.487744998718014,0.545657168950888,11854360.7876882],[1714867200,0.64740373932944,0.653706365130224,0.497226220383602,0.615043116419281,30238189.5101417],[1714780800,0.588912204971997,0.727862066216241,0.573545173493653,0.64740373932944,16714809.7852572],[1714694400,0.590165449457292,0.625589654364728,0.517231640509003,0.588912204971997,14617865.5374397],[1714608000,0.473003592300452,0.648576686901561,0.441327981347081,0.590165449457292,21640369.3699414],[1714521600,0.385220511508081,0.549033464791849,0.337298888464128,0.473003592300452,19490914.6903789],[1714435200,0.438129782575699,0.459837123248329,0.31445,0.385220511508081,14788716.8566902],[1714348800,0.453987362427975,0.4627284514359,0.363290174926127,0.438129782575699,12788262.9218938],[1714262400,0.453085587623982,0.506988693452959,0.425740193761997,0.453987362427975,8321648.90421582],[1714176000,0.445381660077672,0.481101519127997,0.371395886206475,0.453085587623982,16812697.2182471],[1714089600,0.431880700766362,0.575044954957798,0.367494031756118,0.445381660077672,39595017.4214053],[1714003200,0.337072656196771,0.456142493190247,0.297514713369257,0.431880700766362,30634945.8815559],[1713916800,0.470171880076372,0.490786448925919,0.315698973726629,0.337072656196771,23838812.7869965],[1713830400,0.405433907872976,0.507851545895893,0.339222010426713,0.470171880076372,31746770.9226758],[1713744000,0.285343694930127,0.417973742985705,0.265764786309474,0.405433907872976,34455124.5858846],[1713657600,0.212919506882433,0.31276367645932,0.190306584590092,0.285343694930127,16874704.3335446],[1713571200,0.162478979054223,0.214891132307059,0.127291506640923,0.212919506882433,7066812.13103322],[1713484800,0.142270832503484,0.177071098073222,0.100729373119195,0.162478979054223,10644939.8052829],[1713398400,0.114602443968144,0.146389749447786,0.109673362325903,0.142270832503484,5194311.44731552],[1713312000,0.118846078698384,0.127259476662716,0.0906142854668089,0.114602443968144,5375394.31800861],[1713225600,0.1272784040595,0.1272784040595,0.1001880088867,0.118846078698384,5795738.80653624],[1713139200,0.158775654998078,0.170190951050125,0.117427031907172,0.1272784040595,8652290.24781406],[1713052800,0.121449244494795,0.185387561542944,0.116224756600927,0.158775654998078,6906294.20380094],[1712966400,0.162302534567992,0.163171598943466,0.0892278528179021,0.121449244494795,11067382.0552714],[1712880000,0.216488631187367,0.223612097307848,0.138376924205991,0.162302534567992,10358186.8632929],[1712793600,0.233559912876144,0.236576782400302,0.197395099056921,0.216488631187367,3255873.42167576],[1712707200,0.236053694147832,0.249720132454852,0.205914510031318,0.233559912876144,2571464.20865326],[1712620800,0.288627212663297,0.306982555446413,0.229529620151887,0.236053694147832,3017090.5804253],[1712534400,0.28753903813936,0.335650501946564,0.267897464243764,0.288627212663297,3471923.42707822],[1712448000,0.235424094051371,0.311873085367244,0.220261160937919,0.28753903813936,3372328.25159747],[1712361600,0.195768971827008,0.249251306581857,0.178258775222129,0.235424094051371,2688793.02382737],[1712275200,0.252269255546163,0.253602229775183,0.178978044965908,0.195768971827008,4361032.76930382],[1712188800,0.280403126152172,0.28940604366325,0.232942026571143,0.252269255546163,3534830.55323502],[1712102400,0.244910924468124,0.332303922780708,0.218930217473238,0.280403126152172,5595655.43219768],[1712016000,0.364859870472072,0.364911864644398,0.205737661483883,0.244910924468124,7061807.42416477],[1711929600,0.448327131946667,0.452003668181329,0.318283146360666,0.364859870472072,9046170.88331649],[1711843200,0.252173806420939,0.454970094584675,0.225377025475269,0.448327131946667,10532632.168152],[1711756800,0.325063353843674,0.370668276651156,0.224030234357008,0.252173806420939,7072731.120066],[1711670400,0.355994251365193,0.368992408491257,0.28781309497168,0.325063353843674,5621865.02344907],[1711584000,0.295856756404485,0.396796670531051,0.255460799193316,0.355994251365193,8272718.79420908],[1711497600,0.269844441373588,0.341639380138578,0.254158793883294,0.295856756404485,6847014.90838982],[1711411200,0.22710077173194,0.279325051924887,0.210110864749533,0.269844441373588,4240950.71906127],[1711324800,0.231659048689477,0.271224620000651,0.213107698173134,0.22710077173194,3617988.36995293],[1711238400,0.162438945466457,0.249100982348896,0.16147538834357,0.231659048689477,3132451.03132642],[1711152000,0.168641816684657,0.201109591273447,0.159637946014873,0.162438945466457,1894833.14415497],[1711065600,0.206360800394124,0.218114707864341,0.15936384315027,0.168641816684657,3696533.45348139],[1710979200,0.205662667170684,0.231947646797271,0.148211019259107,0.206360800394124,3372418.24587029],[1710892800,0.155885957904543,0.228460944996624,0.138514851799232,0.205662667170684,4260335.82879195],[1710806400,0.165051116813308,0.190388667761801,0.0842511627906977,0.155885957904543,6925434.9430385],[1710720000,0.277695882610271,0.288014569872873,0.153748805000915,0.165051116813308,9478296.98705794],[1710633600,0.181321321767182,0.296991762526787,0.159810340836945,0.277695882610271,7923004.02389917],[1710547200,0.306418422490991,0.335507714600688,0.149073079117077,0.181321321767182,9512186.98113158],[1710460800,0.351227907313069,0.3871913011582,0.265187011958263,0.306418422490991,12756638.6577913],[1710374400,0.263447005192748,0.362003471974905,0.211329343973269,0.351227907313069,11580740.4668858],[1710288000,0.19907287051052,0.272098122306756,0.189247144842965,0.263447005192748,5330545.73769932],[1710201600,0.221513901739805,0.250809989247071,0.172377066285752,0.19907287051052,5035963.85934896],[1710115200,0.194111180679044,0.290125930538109,0.168596936311116,0.221513901739805,8267732.38679072],[1710028800,0.178896228551771,0.231703581424251,0.15524505235766,0.194111180679044,5886716.73588934],[1709942400,0.216903099987898,0.261002200297642,0.169496531317586,0.178896228551771,8522682.851167],[1709856000,0.129660239343576,0.276505866368974,0.126484229390196,0.216903099987898,14786626.7320563],[1709769600,0.149095923895765,0.181303644790671,0.125696424147986,0.129660239343576,6925884.46728276],[1709683200,0.0922325450349314,0.177690332739869,0.0713037423205031,0.149095923895765,12925381.1627611],[1709596800,0.0983135588234004,0.130962455630458,0.0629211470352448,0.0922325450349314,9417445.76715314],[1709510400,0.0739043502269948,0.125454328133916,0.0610800096898854,0.0983135588234004,15196411.5466138],[1709424000,0.0328188227680764,0.0937042622299662,0.0278203920966145,0.0739043502269948,10805009.6595277],[1709337600,0.0307412375995381,0.0446070732269103,0.0276792079436923,0.0328188227680764,2937017.8112729],[1709251200,0.0154585594516085,0.0329659081816087,0.0150870164193322,0.0307412375995381,2117458.49510625],[1709164800,0.0151891317924256,0.0218719224939492,0.0144634696005378,0.0154585594516085,1606015.48224938],[1709078400,0.00938778571899952,0.0157567857665325,0.00893068859614506,0.0151891317924256,1558456.03462074],[1708992000,0.00828573245218462,0.0134314486273821,0.00828261790600278,0.00938778571899952,850030.767822393],[1708905600,0.00807366676201948,0.0100284793975802,0.00727297423917238,0.00828573245218462,289852.617400102],[1708819200,0.0087852873887772,0.00879561780330553,0.00656520464095867,0.00807366676201948,138274.499015322],[1708732800,0.00810637102652243,0.0100173713486219,0.00796173738164702,0.0087852873887772,192895.675074169],[1708646400,0.00821260322890386,0.00866308816865333,0.00692305539588052,0.00810637102652243,301958.422138186],[1708560000,0.00886301043494052,0.0100578741522796,0.007359350157138,0.00821260322890386,194258.334743391],[1708473600,0.0103734539589238,0.0104033746407749,0.00795462920188387,0.00886301043494052,130353.18780033],[1708387200,0.010725560859758,0.011182611285829,0.00890135968265568,0.0103734539589238,206487.581896182],[1708300800,0.0145570971021222,0.0155866913560579,0.0106823841580228,0.010725560859758,226115.275520935],[1708214400,0.00996601654722469,0.0151315253199043,0.00969825955526337,0.0145570971021222,421871.804646868],[1708128000,0.0091401290365794,0.0113011810992322,0.00761642063316611,0.00996601654722469,316318.312259837],[1708041600,0.0119685892263224,0.0119685892263224,0.00849817098406121,0.0091401290365794,247945.876200071],[1707955200,0.0098192868101472,0.01531494115072,0.00838964217534636,0.0119685892263224,649360.223211924],[1707868800,0.00760127916485332,0.0109965416807132,0.00622325763797698,0.0098192868101472,361178.390737412],[1707782400,0.00733779008948363,0.0092203210023287,0.00670226271826815,0.00760127916485332,260203.048385977],[1707696000,0.00730934944432153,0.00795740749196149,0.00694639973252397,0.00733779008948363,148477.700567976],[1707609600,0.00749476975146757,0.00872429459530328,0.00730682772428308,0.00730934944432153,157912.435018107],[1707523200,0.00912530964156378,0.0107222844782832,0.00718525536886931,0.00749476975146757,189089.003499514],[1707436800,0.00863234560476805,0.00947105492589925,0.0073061830046842,0.00912530964156378,142340.437986646],[1707350400,0.00880135534698966,0.0110523888062415,0.00859867008646879,0.00863234560476805,241415.399486424],[1707264000,0.0111632993854603,0.0120107178275506,0.0071630681653962,0.00880135534698966,666632.393928789],[1707177600,0.00944480566389462,0.0134900626719527,0.00788392831632273,0.0111632993854603,921220.898937216],[1707091200,0.0070375467399076,0.00981644503349035,0.00608901106230452,0.00944480566389462,559857.763605161],[1707004800,0.00688102009011032,0.00723831010219299,0.00581319224381476,0.0070375467399076,312141.437595761],[1706918400,0.00630150594859106,0.00770067415862205,0.00511836766144735,0.00688102009011032,364434.925296566],[1706832000,0.00687522749083473,0.00780591723609283,0.00578898238918993,0.00630150594859106,572791.529416404],[1706745600,0.00895365875304985,0.00927120814432529,0.00611486504770897,0.00687522749083473,763541.660957799],[1706659200,0.0123271679346214,0.0133206122888697,0.00853633590234135,0.00895365875304985,772887.970854025],[1706572800,0.0108714541581985,0.0135442235862866,0.00961458140305486,0.0123271679346214,684467.812560832],[1706486400,0.0114249033885507,0.0135567441321165,0.0102659998272751,0.0108714541581985,634638.944229904],[1706400000,0.0112031608783704,0.0139484434453008,0.00826129748932711,0.0114249033885507,962584.270717275],[1706313600,0.0123882631516584,0.0141099609331194,0.00957314567404861,0.0112031608783704,678061.096249462],[1706227200,0.0167297495035049,0.0167480771763363,0.0119037289102812,0.0123882631516584,1030799.11556655],[1706140800,0.0168101667913224,0.0183075871718532,0.0132924375871972,0.0167297495035049,692660.111428114],[1706054400,0.0190814866223649,0.0199535652816377,0.01448474012186,0.0168101667913224,1136843.91977678],[1705968000,0.0131494057583326,0.0192586589252042,0.0131494057583326,0.0190814866223649,1103550.47759294],[1705881600,0.0171981223162011,0.0198046377078452,0.0131306462954556,0.0131494057583326,1705313.11518809],[1705795200,0.0225961049473687,0.0246295417132468,0.0165845667108505,0.0171981223162011,1337965.18606958],[1705708800,0.0290203372649612,0.0302731186370296,0.0203263323673449,0.0225961049473687,2512606.89543171],[1705622400,0.030663290347373,0.0359042801207339,0.0215009724642361,0.0290203372649612,2669625.30428446],[1705536000,0.0274103986538341,0.0392051414168581,0.0240024115626359,0.030663290347373,5714186.56979849],[1705449600,0.0184224863359554,0.0295314565891153,0.0174093394294609,0.0274103986538341,1824225.13971699],[1705363200,0.0216662438524849,0.0239335305408521,0.0119828734445805,0.0184224863359554,2053924.73264645],[1705276800,0.0172750569315451,0.0294330609552234,0.015318152747499,0.0216662438524849,4180960.21400445],[1705190400,0.013507538607851,0.0199174868060276,0.0112952098151622,0.0172750569315451,2931196.3345701],[1705104000,0.00999891621078553,0.0161396848197264,0.00920211963437008,0.013507538607851,1615264.11615381],[1705017600,0.0130623169274924,0.0135562869173508,0.00704505464274221,0.00999891621078553,1435817.17561291],[1704931200,0.00963758284984586,0.0175968536084532,0.00873173265364231,0.0130623169274924,1908240.24667001],[1704844800,0.00707362170451487,0.0134677931387152,0.00515293884349762,0.00963758284984586,1079001.60271005],[1704758400,0.00829835826994772,0.00946601496916478,0.00635312409064644,0.00707362170451487,700502.908318968],[1704672000,0.00542299985890752,0.0100576517609506,0.00454601208918026,0.00829835826994772,877753.633391452],[1704585600,0.00691506509242405,0.0101091465934431,0.00525400240781467,0.00542299985890752,1013460.11719824],[1704499200,0.00506227118918678,0.00846967174693677,0.00385252865879452,0.00691506509242405,767807.236855061],[1704412800,0.00550695891160234,0.00632145869739338,0.00362423783771611,0.00506227118918678,493650.771239021],[1704326400,0.00499860498907834,0.00721024597585127,0.00409596743144385,0.00550695891160234,899117.43166688],[1704240000,0.00803545588672056,0.00806220077891541,0.00382004674012195,0.00499860498907834,995483.126449227],[1704153600,0.00915350380117225,0.0100301164063246,0.00764136414807437,0.00803545588672056,848245.136879321],[1704067200,0.00813055042787317,0.0111755801545988,0.00720702075619749,0.00915350380117225,840192.778865744],[1703980800,0.00989186374391717,0.0105550144242335,0.00653243990348082,0.00813055042787317,1065350.8648134],[1703894400,0.0138490621963714,0.0148783626698974,0.00942691330066341,0.00989186374391717,1606610.17794963],[1703808000,0.0102534063971417,0.0159722826794004,0.00861958720712156,0.0138490621963714,1777940.17569447],[1703721600,0.0126749141063423,0.0126749141063423,0.00754849216409359,0.0102534063971417,1875467.68087726],[1703635200,0.0130829374294529,0.0191311196959994,0.00841185039448269,0.0126749141063423,2792743.01636192],[1703548800,0.0139149405399235,0.016579592292212,0.00673208706982479,0.0130829374294529,3345597.20274036],[1703462400,0.0130645383070102,0.0207519384528636,0.00973452043000099,0.0139149405399235,3582881.01555885],[1703376000,0.0248749922889819,0.0281202544856465,0.0122244912604779,0.0130645383070102,3634983.30222218],[1703289600,0.0336277088550142,0.0358018452797369,0.0111105219655291,0.0248749922889819,10428317.0524403],[1703203200,0.0305574786818544,0.0502284947808933,0.0159721435482663,0.0336277088550142,14957706.4218478],[1703116800,0.0173906048183096,0.0353876601362186,0.0158010808058936,0.0305574786818544,6533221.33316601],[1703030400,0.0122392491893375,0.0247427748535001,0.0093683078458116,0.0173906048183096,5524915.46721738],[1702944000,0.00449888404159938,0.0190496003371394,0.00325412137045047,0.0122392491893375,7012512.43692131],[1702857600,0.00305108027735474,0.00714876273385209,0.00169038275481687,0.00449888404159938,2836431.61171083],[1702771200,0.00260419612806352,0.00470070401162172,0.00158896358026977,0.00305108027735474,1469971.28815413],[1702684800,0.0043931682326092,0.00858113951444264,0.00192954757409016,0.00260419612806352,3121349.67804681],[1702598400,0.00329920679979914,0.0104513725421799,0.00242851754985633,0.0043931682326092,5446173.03394409],[1702512000,0.000406724515981608,0.00443657291156052,0.000286893704019249,0.00329920679979914,2796151.42556863],[1702425600,6.77565510097667e-05,0.00086637337337318,1.3535611441153e-05,0.000406724515981608,1571656.42942394],[1702339200,7.21991462869148e-05,0.000241628910176711,6.02639362473495e-05,6.77565510097667e-05,461350.033651276]]}},"meta":{"base":{"address":"7GCihgDB8fe6KNjn2MYtkzZcRjQy3t9GHdC8uHYmW2hr","name":"Popcat","symbol":"POPCAT","coingecko_coin_id":"popcat"},"quote":{"address":"So11111111111111111111111111111111111111112","name":"Wrapped SOL","symbol":"SOL","coingecko_coin_id":"wrapped-solana"}}})).unwrap();
        let mut ohlcv = data.ohlcv_data().expect("unwrapping ohlcv");
        ohlcv.0[0].timestamp = Utc::now();
        let result = ohlcv.analyze().expect("analysis");
        assert!(result.range_low_breaks.is_empty());
        assert_eq!(
            serde_json::to_value(&result.range_high_breaks[..9]).unwrap(),
            json!([{
                "prev_bound": 0.000241628910176711,
                "idx": 1,
            }, {
                "prev_bound": 0.00086637337337318,
                "idx": 2,
            }, {
                "prev_bound": 0.0104513725421799,
                "idx": 7,
            }, {
                "prev_bound": 0.0247427748535001,
                "idx": 9,
            }, {
                "prev_bound": 0.0502284947808933,
                "idx": 82,
            }, {
                "prev_bound": 0.0937042622299662,
                "idx": 83,
            }, {
                "prev_bound": 0.130962455630458,
                "idx": 85,
            }, {
                "prev_bound": 0.181303644790671,
                "idx": 87,
            }, {
                "prev_bound": 0.290125930538109,
                "idx": 93,
            }])
        );
        assert_eq!(
            serde_json::to_value(&result.bullish_engulfing[..5]).unwrap(),
            json!([{
                "idx": 6,
                "num_engulfing": 2,
                "count_before_opp": 5,
                "percent_before_opp": 4.52914724162099,
                "rr_prev_day_stop_until_opp": 7.255153609249689,
            }, {
                "idx": 17,
                "num_engulfing": 1,
                "count_before_opp": 1,
                "percent_before_opp": -0.2857376475275747,
                "rr_prev_day_stop_until_opp": -0.7567104653122901,
            }, {
                "idx": 27,
                "num_engulfing": 5,
                "count_before_opp": 12,
                "percent_before_opp": 1.722960881214286,
                "rr_prev_day_stop_until_opp": 3.810348509608112,
            }, {
                "idx": 42,
                "num_engulfing": 1,
                "count_before_opp": 3,
                "percent_before_opp": -0.35077054545957403,
                "rr_prev_day_stop_until_opp": -1.,
            }, {
                "idx": 49,
                "num_engulfing": 1,
                "count_before_opp": 1,
                "percent_before_opp": -0.27366457563191776,
                "rr_prev_day_stop_until_opp": -1.0,
            }])
        );
        assert_eq!(
            serde_json::to_value(&result.bullish_engulfing[15]).unwrap(),
            json!({
                "idx": 128,
                "num_engulfing": 1,
                "count_before_opp": 6,
                "percent_before_opp": 1.3692323315006725,
                "rr_prev_day_stop_until_opp": -1.,
            })
        );
        assert_eq!(
            serde_json::to_value(&result.bearish_engulfing[..9]).unwrap(),
            json!([{
                "idx": 4,
                "num_engulfing": 1,
                "count_before_opp": 2,
                "percent_before_opp": -0.7275519278744762,
                "rr_prev_day_stop_until_opp": -0.3169994746568408,
            }, {
                "idx": 11,
                "num_engulfing": 1,
                "count_before_opp": 6,
                "percent_before_opp": 0.4432536084642049,
                "rr_prev_day_stop_until_opp": 1.00906730436836,
            }, {
                "idx": 18,
                "num_engulfing": 1,
                "count_before_opp": 9,
                "percent_before_opp": 0.1610925418326096,
                "rr_prev_day_stop_until_opp": 0.31956398620023857,
            }, {
                "idx": 39,
                "num_engulfing": 2,
                "count_before_opp": 3,
                "percent_before_opp": 0.15554089225510848,
                "rr_prev_day_stop_until_opp": 0.45781061062026607,
            }, {
                "idx": 45,
                "num_engulfing": 3,
                "count_before_opp": 4,
                "percent_before_opp": 0.004931701586337496,
                "rr_prev_day_stop_until_opp": 0.014013262192190352,
            }, {
                "idx": 50,
                "num_engulfing": 1,
                "count_before_opp": 3,
                "percent_before_opp": 0.23148510794355825,
                "rr_prev_day_stop_until_opp": 0.4746188952867833,
            }, {
                "idx": 57,
                "num_engulfing": 1,
                "count_before_opp": 2,
                "percent_before_opp": -0.03680731907784208,
                "rr_prev_day_stop_until_opp": -0.1009403881725128,
            }, {
                "idx": 60,
                "num_engulfing": 1,
                "count_before_opp": 3,
                "percent_before_opp": -0.014211165508439339,
                "rr_prev_day_stop_until_opp": -0.033000442260053144,
            }, {
                "idx": 66,
                "num_engulfing": 1,
                "count_before_opp": 2,
                "percent_before_opp": -0.5926577233060645,
                "rr_prev_day_stop_until_opp": -1.,
            }])
        );
    }
}
